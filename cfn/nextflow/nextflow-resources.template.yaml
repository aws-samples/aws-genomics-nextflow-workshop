---
AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  (WWPS-GLS-WF-NEXTFLOW) Creates resources specific to running Nextflow on AWS


Mappings:
  TagMap:
    default:
      architecture: "genomics-workflows"
      solution: "nextflow"
      tags:
        - Key: "architecture"
          Value: "genomics-workflows"
        - Key: "solution"
          Value: "nextflow"


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - S3DataBucketName
          - S3NextflowBucketName
          - ExistingBucket
          - BatchDefaultJobQueue
      - Label:
          default: "Optional"
        Parameters:
          - NextflowContainerImage
          - S3NextflowPrefix
          - S3LogsDirPrefix
          - S3WorkDirPrefix


Parameters:
  S3DataBucketName:
    Type: String
    Description: >-
      S3 Bucket used to store input and output data for the workflow.
      This should bucket should already exist.
    
  S3NextflowBucketName:
    Type: String
    Description: >-
      S3 Bucket used to store Nextflow metadata (session cache, logs, and intermediate results)
    
  ExistingBucket:
    Type: String
    Description: >-
      Does the S3 Bucket for Nextflow metadata already exist?  If not, it will be created.
    AllowedValues:
      - Yes
      - No
    Default: No
  
  S3NextflowPrefix:
    Type: String
    Description: >-
      (Optional) Parent folder in the Nextflow metadata bucket for metadata folders.
      Used only if the Nextflow metadata bucket is the same as the Data bucket.
    Default: _nextflow

  S3LogsDirPrefix:
    Type: String
    Description: >-
      (Optional) Folder in the Nextflow metadata bucket (under the {Nextflow Prefix} if needed)
      for session cache and logs.
    Default: logs
  
  S3WorkDirPrefix:
    Type: String
    Description: >-
      (Optional) Folder in the Nextflow metadata bucket (under the {Nextflow Prefix} if needed)
      that contains workflow intermediate results
    Default: runs
  
  NextflowContainerImage:
    Type: String
    Description: >-
      (Optional) Container image for nextflow with custom entrypoint for config and workflow
      script staging. (Example, "<dockerhub-user>/nextflow:latest").  
      Provide this if you have a specific version of nextflow you want to use, otherwise a 
      container will be built using the latest version. 

  BatchDefaultJobQueue:
    Type: String
    Description: >-
      Name or ARN of the Batch Job Queue to use by default for workflow tasks.

Conditions:
  DataBucketIsNextflowBucket:
    Fn::Equals:
      - !Ref S3NextflowBucketName
      - !Ref S3DataBucketName
  
  BuildNextflowContainer:
    Fn::Equals:
      - !Ref NextflowContainerImage
      - ""

  NextflowBucketDoesNotExist:
    Fn::Equals:
      - !Ref ExistingBucket
      - No


Resources:
  S3NextflowBucket:
    Type: AWS::S3::Bucket
    Condition: NextflowBucketDoesNotExist
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref S3NextflowBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
             SSEAlgorithm: AES256
      Tags: !FindInMap ["TagMap", "default", "tags"]
  
  IAMCodeBuildRole:
    Type: AWS::IAM::Role
    Condition: BuildNextflowContainer
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      
      Policies:
        - PolicyName: !Sub codebuild-ecr-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - "ecr:CreateRepository"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:CompleteLayerUpload"
                - "ecr:GetAuthorizationToken"
                - "ecr:InitiateLayerUpload"
                - "ecr:PutImage"
                - "ecr:UploadLayerPart"
        - PolicyName: !Sub codebuild-logs-access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              Effect: Allow
              Resource: "*"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents

  IAMLambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: BuildNextflowContainer
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: !Sub codebuild-access-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                  - "codebuild:BatchGetBuilds"
                Resource: "*"
  
  IAMNextflowJobRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyName: !Sub Nextflow-Batch-Access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "batch:*"
        - PolicyName: !Sub Nextflow-S3Bucket-Access-${AWS::Region}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  Fn::If:
                    - DataBucketIsNextflowBucket

                    - - !Join ["", ["arn:aws:s3:::", !Ref S3DataBucketName]]
                      - !Join ["", ["arn:aws:s3:::", !Ref S3DataBucketName, "/*"]]

                    - - !Join ["", ["arn:aws:s3:::", !Ref S3DataBucketName]]
                      - !Join ["", ["arn:aws:s3:::", !Ref S3DataBucketName, "/*"]]
                      - !Join ["", ["arn:aws:s3:::", !Ref S3NextflowBucketName]]
                      - !Join ["", ["arn:aws:s3:::", !Ref S3NextflowBucketName, "/*"]]
                Action:
                  - "s3:*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "ecs-tasks.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Condition: BuildNextflowContainer
    Properties:
      Name: !Sub
        - nextflow-container-${GUID}
        - GUID: !Select [ 2, !Split [ "/", !Ref "AWS::StackId" ]]
      Description: >-
        Builds a nextflow container for running genomics workflows
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/standard:1.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: True

      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              pre_build:
                commands:
                  - echo "Docker Login to ECR"
                  - $(aws ecr get-login --no-include-email --region ${AWS::Region})
                  - echo "Creating ECR image repository"
                  - aws ecr create-repository --repository-name nextflow || true
                  - echo "Getting source code from Github"
                  - git clone https://github.com/aws-samples/aws-genomics-workflows.git
                  - cd aws-genomics-workflows
                  - cd src/containers/nextflow
              build:
                commands:
                  - echo "Building container"
                  - docker build -t nextflow .
              post_build:
                commands:
                  - echo "Tagging container image"
                  - docker tag nextflow:latest ${REGISTRY}/nextflow:latest
                  - echo "Pushing container image to ECR"
                  - docker push ${REGISTRY}/nextflow:latest
          - REGISTRY: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

      Tags: !FindInMap ["TagMap", "default", "tags"]
  
  CodeBuildInvocation:
    Type: Custom::CodeBuildInvocation
    Condition: BuildNextflowContainer
    Properties:
      ServiceToken: !GetAtt CodeBuildInvocationFunction.Arn
      BuildProject: !Ref CodeBuildProject
  
  CodeBuildInvocationFunction:
    Type: AWS::Lambda::Function
    Condition: BuildNextflowContainer
    Properties:
      Handler: index.handler
      Role: !GetAtt IAMLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 600
      Code:
        ZipFile: |
          from time import sleep

          import boto3
          import cfnresponse

          def handler(event, context):
              if event['RequestType'] in ("Create", "Update"):
                  codebuild = boto3.client('codebuild')
                  build = codebuild.start_build(
                      projectName=event["ResourceProperties"]["BuildProject"]
                  )['build']
                          
                  id = build['id']
                  status = build['buildStatus']
                  while status == 'IN_PROGRESS':
                      sleep(10)
                      build = codebuild.batch_get_builds(ids=[id])['builds'][0]
                      status = build['buildStatus']
                  
                  if status != "SUCCEEDED":
                      cfnresponse.send(event, context, cfnresponse.FAILED, None)
              
              cfnresponse.send(event, context, cfnresponse.SUCCESS, None)

  BatchNextflowJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      Type: container
      ContainerProperties: 
        MountPoints: 
          - ContainerPath: /opt/work
            SourceVolume: scratch
        Volumes: 
          - Host:
              SourcePath: /scratch
            Name: scratch
        Command: 
          - Ref::NextflowScript
        Memory: 1024
        JobRoleArn: !GetAtt IAMNextflowJobRole.Arn
        Vcpus: 2
        Image:
          Fn::If:
            - BuildNextflowContainer
            - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/nextflow:latest
            - !Ref NextflowContainerImage
        Environment:
          - Name: "NF_JOB_QUEUE"
            Value: !Ref BatchDefaultJobQueue
          - Name: "NF_LOGSDIR"
            Value: 
              Fn::Join: 
                - "/"
                - - Fn::If:
                      - DataBucketIsNextflowBucket
                      - !Join ["/", [!Sub "s3://${S3NextflowBucketName}", !Ref S3NextflowPrefix]]
                      - !Sub "s3://${S3NextflowBucketName}"
                  - !Ref S3LogsDirPrefix
          - Name: "NF_WORKDIR"
            Value: 
              Fn::Join: 
                - "/"
                - - Fn::If:
                      - DataBucketIsNextflowBucket
                      - !Join ["/", [!Sub "s3://${S3NextflowBucketName}", !Ref S3NextflowPrefix]]
                      - !Sub "s3://${S3NextflowBucketName}"
                  - !Ref S3WorkDirPrefix
              
      JobDefinitionName: nextflow


Outputs:
  NextflowBucket:
    Description: >-
      S3 Bucket used to store Nextflow metadata (session cache, logs, and intermediate results)
    Value:
      Fn::If:
        - NextflowBucketDoesNotExist
        - !Ref S3NextflowBucket
        - !Ref S3NextflowBucketName
  
  LogsDir:
    Description: >-
      S3 URI where nextflow session cache and logs are stored.
    Value:
      Fn::Join:
        - "/"
        - - Fn::If:
              - DataBucketIsNextflowBucket
              - !Join ["/", [!Sub "s3://${S3NextflowBucketName}", !Ref S3NextflowPrefix]]
              - !Sub "s3://${S3NextflowBucketName}"
          - !Ref S3LogsDirPrefix

  WorkDir:
    Description: >-
      S3 URI where workflow intermediate results are stored.
    Value:
      Fn::Join: 
        - "/"
        - - Fn::If:
              - DataBucketIsNextflowBucket
              - !Join ["/", [!Sub "s3://${S3NextflowBucketName}", !Ref S3NextflowPrefix]]
              - !Sub "s3://${S3NextflowBucketName}"
          - !Ref S3WorkDirPrefix

  NextflowContainerImage:
    Description: >-
      The nextflow container used.
    Value:
      Fn::If:
        - BuildNextflowContainer
        - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/nextflow:latest
        - !Ref NextflowContainerImage

  NextflowJobDefinition:
    Description: >-
      Batch Job Definition that creates a nextflow head node for running workflows
    Value: !Ref BatchNextflowJobDefinition
  
  NextflowJobRole:
    Description: >-
      IAM Role that allows the nextflow head node job access to S3 and Batch
    Value: !GetAtt IAMNextflowJobRole.Arn
...